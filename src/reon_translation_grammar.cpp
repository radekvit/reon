#include <reon_translation_grammar.h>

const TranslationGrammar reonGrammar{
    // Rules
    {
        {"E"_nt, {"RE"_nt}, {"r\""_t, "RE"_nt, "\""_t}},
        {"RE"_nt, {}},
        {"RE"_nt, {"REFULL"_nt}},
        {"REFULL"_nt, {"string"_t}},
        {"REFULL"_nt, {"["_t, "RE-listE"_nt, "]"_t}, {"RE-listE"_nt}},
        {"REFULL"_nt, {"{"_t, "OBJ"_nt, "}"_t}, {"OBJ"_nt}},
        {"OBJ"_nt, {"repeat"_t, ":"_t, "RE"_nt}, {"RE"_nt, "repeat"_t}},
        {"OBJ"_nt, {"ngrepeat"_t, ":"_t, "RE"_nt}, {"RE"_nt, "ngrepeat"_t}},
        {"OBJ"_nt,
         {"set"_t, ":"_t, "string"_t},
         {"["_t, "string"_t, "]"_t},
         {{}, {}, {1}}},
        {"OBJ"_nt,
         {"nset"_t, ":"_t, "string"_t},
         {"[^"_t, "string"_t, "]"_t},
         {{}, {}, {1}}},
        {"OBJ"_nt, {"alternatives"_t, ":"_t, "["_t, "RE-AlistE"_nt, "]"_t}, {"RE-AlistE"_nt}},
        {"OBJ"_nt, {"group"_t, ":"_t, "RE"_nt}, {"("_t, "RE"_nt, ")"_t}},
        {"OBJ"_nt,
         {"flags"_t, ":"_t, "string"_t},
         {"(?"_t, "flags"_t, ")"_t},
         {{}, {}, {1}}},
        {"OBJ"_nt, {"agroup"_t, ":"_t, "RE"_nt}, {"(?:"_t, "RE"_nt, ")"_t}},
        {"OBJ"_nt,
         {"flag"_t, ":"_t, "RE"_nt},
         {"(?"_t, "flag"_t, ":"_t, "RE"_nt, ")"_t},
         {{1}, {}}},
        {"OBJ"_nt,
         {"named group"_t, ":"_t, "RE"_nt},
         {"(?P<"_t, "named group"_t, ">"_t, "RE"_nt, ")"_t},
         {{1}, {}}},
        {"OBJ"_nt, {"reference"_t, ":"_t, "Ref"_nt}, {"Ref"_nt}},
        {"OBJ"_nt,
         {"comment"_t, ":"_t, "string"_t},
         {"(?#"_t, "comment"_t, ")"_t},
         {{}, {}, {1}}},
        {"OBJ"_nt, {"lookahead"_t, ":"_t, "RE"_nt}, {"(?="_t, "RE"_nt, ")"_t}},
        {"OBJ"_nt, {"nlookahead"_t, ":"_t, "RE"_nt}, {"(?!"_t, "RE"_nt, ")"_t}},
        {"OBJ"_nt,
         {"lookbehind"_t, ":"_t, "RE"_nt},
         {"(?<="_t, "RE"_nt, ")"_t}},
        {"OBJ"_nt,
         {"nlookbehind"_t, ":"_t, "RE"_nt},
         {"(?<!"_t, "RE"_nt, ")"_t}},
        {"OBJ"_nt,
         {"if"_t, ":"_t, "Ref"_nt, ","_t, "then"_t, ":"_t, "RE"_nt, "Then"_nt},
         {"(?("_t, "Ref"_nt, ")"_t, "RE"_nt, "Then"_nt, ")"_t}},
        {"Ref"_nt, {"number"_t}, {"\\"_t, "number"_t}, {{1}}},
        {"Ref"_nt, {"string"_t}, {"(?P="_t, "string"_t}, {{1}}},
        {"Then"_nt, {","_t, "then"_t, ":"_t, "RE"_nt}, {"|"_t, "RE"_nt}},
        {"Then"_nt, {}},
        {"RE-listE"_nt, {"REFULL"_nt, "RE-list"_nt}},
        {"RE-listE"_nt, {}},
        {"RE-list"_nt,
         {","_t, "REFULL"_nt, "RE-list"_nt},
         {"REFULL"_nt, "RE-list"_nt}},
        {"RE-list"_nt, {}},
        {"RE-AlistE"_nt, {}},
        {"RE-AlistE"_nt, {"REFULL"_nt, "RE-Alist"_nt}, {"(?:"_t, "REFULL"_nt, "RE-Alist"_nt, ")"_t}},
        {"RE-Alist"_nt, {}},
        {"RE-Alist"_nt, {","_t, "REFULL"_nt, "RE-Alist"_nt},{"|"_t, "REFULL"_nt, "RE-Alist"_nt}},
    },
    // Starting nonterminal
    "E"_nt};
